@inherits MudComponentBase

<MudText
    Width="100%"
    Height="100%"
    Class="my-auto"
    Color="@(Spent > Threshold ? Color.Error : Color.Success)"
    Style="font-size: 35px">
    @RemainingTimeText
</MudText>

<MudText>@Name</MudText>


@code {

    public enum CountDownPrecision
    {
        Days,
        Hours,
        Minutes,
        Seconds
    }

    private Timer? _timer;
    public TimeSpan Spent => (StartTime - DateTime.Now).Duration();

    [Parameter]
    public string Name { get; set; } = "";
    [Parameter]
    public CountDownPrecision Precision { get; set; } = CountDownPrecision.Seconds;
    [Parameter]
    public TimeSpan Threshold { get; set; } = TimeSpan.FromDays(3);
    [Parameter]
    public DateTime StartTime { get; set; } = DateTime.Now.AddDays(-3);

    public string RemainingTimeText
    {
        get
        {
            var names = new[] {"D", "H", "M", "S"};
            var values = new[] {Spent.Days, Spent.Hours, Spent.Minutes, Spent.Seconds};
            return string.Join(' ', names
                .Zip(values, (name, value) => (name,value))
                .Take((int) Precision + 1)
                .Select(x => $"{x.value}{x.name}"));
        }
    }

    protected override void OnInitialized()
    {
        _timer = new Timer(_ => { StateHasChanged(); }, null, 0, 1000);
    }

    public void Reset()
    {
        StartTime = DateTime.Now;
    }

}