@page "/"
@using Timo.ViewModels
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Timo | Dashboard</PageTitle>


<MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        <MudText Align="Align.Center" Typo="Typo.subtitle1">Timo | Dashboard for all kind of stuff</MudText>
    </MudItem>

    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
            <Counter Count="_viewModel.Sensors" CountChanged="SensorsChanged" Name="Sensors"/>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
            <Counter Count="_viewModel.Cannulas" CountChanged="CannulasChanged" Name="Cannulas"/>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="6" md="4">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4">
                    <CountDown StartTime="_viewModel.LastCannulaChange" Name="Cannula age"/>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudButton
                    OnClick="@NewCannulaClicked"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Size="Size.Large"
                    Class="rounded-pill"
                    FullWidth="true">
                    New Cannula
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {

    [Inject]
    private IDialogService DialogService { get; set; } = null!;

    private MainViewModel _viewModel = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _viewModel = await LoadState();
    }

    private async Task NewCannulaClicked()
    {
        var result = await DialogService.ShowMessageBox(
            "New cannula",
            "Confirm that new cannula is inserted",
            yesText: "Confirm", cancelText: "Cancel");

        if (result == true)
        {
            _viewModel.InsertCannula();
            await SaveState();
            StateHasChanged();
        }
    }

    private async Task SaveState()
    {
        await LocalStorage.SetItemAsync("state", _viewModel);
    }

    private async Task<MainViewModel> LoadState() =>
        await LocalStorage.ContainKeyAsync("state")
            ? await LocalStorage.GetItemAsync<MainViewModel>("state") ?? new MainViewModel()
            : new MainViewModel
            {
                Cannulas = 3,
                LastCannulaChange = DateTime.Now.AddDays(-2),
                Sensors = 5,
                LastSensorChange = DateTime.Now.AddDays(-7),
            };

    private async Task CannulasChanged(int count)
    {
        _viewModel.Cannulas = count;
        await SaveState();
    }

    private async Task SensorsChanged(int count)
    {
        _viewModel.Sensors = count;
        await SaveState();
    }
}