@page "/"
@using Timo.ViewModels
@using Timo.Dialogs
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Timo | Dashboard</PageTitle>

<MudStack Justify="Justify.Center">
    <MudPaper Elevation="2" Class="pa-4">
        <Counter Count="_viewModel.Sensors"
                 CountChanged="SensorsChanged"
                 OnAction="NewSensorClicked"
                 Name="Sensors"/>
        <MudDivider />
        <CountDown Threshold="TimeSpan.FromDays(10)"
            StartTime="_viewModel.LastSensorChange" 
            Name="Sensor age"/>
    </MudPaper>

    <MudPaper Elevation="2" Class="pa-4">
        <Counter Count="_viewModel.Cannulas"
                 CountChanged="CannulasChanged"
                 OnAction="NewCannulaClicked"
                 Name="Cannulas"/>
        <MudDivider />
        <CountDown Threshold="TimeSpan.FromDays(3).Add(TimeSpan.FromHours(12))"
            StartTime="_viewModel.LastCannulaChange" 
            Name="Cannula age"/>
    </MudPaper>
</MudStack>

@code {

    [Inject]
    private IDialogService DialogService { get; set; } = null!;

    private MainViewModel _viewModel = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _viewModel = await LoadState();
    }

    private async Task NewCannulaClicked()
    {
        var parameters = new DialogParameters
        {
            {nameof(InsertionDialog.Text), "Confirm that new cannula is inserted"},
        };
        var dialog = DialogService.Show<InsertionDialog>("New cannula", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var insertedAt = result.Data as DateTime?;
            _viewModel.InsertCannula(insertedAt ?? DateTime.Now);
            await SaveState();
            StateHasChanged();
        }
    }

    private async Task NewSensorClicked()
    {
        var parameters = new DialogParameters
        {
            {nameof(InsertionDialog.Text), "Confirm that new sensor is inserted"},
        };
        var dialog = DialogService.Show<InsertionDialog>("New sensor", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var insertedAt = result.Data as DateTime?;
            _viewModel.InsertSensor(insertedAt ?? DateTime.Now);
            await SaveState();
            StateHasChanged();
        }
    }

    private async Task SaveState() =>
        await LocalStorage.SetItemAsync("state", _viewModel);

    private async Task<MainViewModel> LoadState() =>
        await LocalStorage.ContainKeyAsync("state")
            ? await LocalStorage.GetItemAsync<MainViewModel>("state") ?? new MainViewModel()
            : new MainViewModel
            {
                Cannulas = 3,
                LastCannulaChange = DateTime.Now.AddDays(-2),
                Sensors = 5,
                LastSensorChange = DateTime.Now.AddDays(-7),
            };

    private async Task CannulasChanged(int count)
    {
        _viewModel.Cannulas = count;
        await SaveState();
    }

    private async Task SensorsChanged(int count)
    {
        _viewModel.Sensors = count;
        await SaveState();
    }

}